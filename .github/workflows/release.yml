# GitHub Actions Workflow created for handling the release process based on the draft release prepared
# with the Draft Release workflow.

name: Release Docker Image
on:
  release:
    types: [prereleased, released]

jobs:
  releaseDockerImage:
    needs: releaseJavaBinary
    name: Release Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v3

      - name: Setup Environment
        run: |
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: corretto
          java-version: 17

      # Start SSH Agent and add the private key
      - name: Start SSH Agent and add the private key
        env:
          SSH_PASSPHRASE: ${{secrets.SSH_PASSPHRASE}}
          SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          echo 'echo $SSH_PASSPHRASE' > ~/.ssh_askpass && chmod +x ~/.ssh_askpass
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | DISPLAY=None SSH_ASKPASS=~/.ssh_askpass ssh-add - >/dev/null
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
        # Create the docker image
      - name: Build & Push Docker Image
        if: success()
        env:
          IMAGE_NAME: ${{ github.repository }}
          IMAGE_VERSION: ${{ env.VERSION }}
          REGISTRY_PASS: ${{ secrets.GITHUB_TOKEN }}
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_NAME: ghcr.io
        run: |
          set -x
          echo $REGISTRY_PASS | docker login "${REGISTRY_NAME}" -u "${REGISTRY_PASS}" --password-stdin
          # Changing the default driver is mandatory for multi-arch builds
          docker buildx create --name multiarch --use
          ./mvnw package -Pdocker -DdockerImageTag=latest -DdockerImageArchs=linux/amd64,linux/arm64 -DdockerBuildOutput=type=image \
          -DdockerImagePush=true -DdockerRegistry="${REGISTRY_NAME}" -DdockerPassword="${REGISTRY_PASS}" -DdockerUsername="${REGISTRY_USER}"
